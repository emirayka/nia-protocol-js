// source: protocol.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ExecuteCodeRequest', null, global);
goog.exportSymbol('proto.ExecuteCodeResponse', null, global);
goog.exportSymbol('proto.ExecuteCodeResponse.ErrorResult', null, global);
goog.exportSymbol('proto.ExecuteCodeResponse.FailureResult', null, global);
goog.exportSymbol('proto.ExecuteCodeResponse.ResultCase', null, global);
goog.exportSymbol('proto.ExecuteCodeResponse.SuccessResult', null, global);
goog.exportSymbol('proto.GetDeviceInfoRequest', null, global);
goog.exportSymbol('proto.GetDeviceInfoResponse', null, global);
goog.exportSymbol('proto.GetDeviceInfoResponse.ErrorResult', null, global);
goog.exportSymbol('proto.GetDeviceInfoResponse.ResultCase', null, global);
goog.exportSymbol('proto.GetDeviceInfoResponse.SuccessResult', null, global);
goog.exportSymbol('proto.GetDevicesRequest', null, global);
goog.exportSymbol('proto.GetDevicesResponse', null, global);
goog.exportSymbol('proto.GetDevicesResponse.ErrorResult', null, global);
goog.exportSymbol('proto.GetDevicesResponse.ResultCase', null, global);
goog.exportSymbol('proto.GetDevicesResponse.SuccessResult', null, global);
goog.exportSymbol('proto.HandshakeRequest', null, global);
goog.exportSymbol('proto.HandshakeResponse', null, global);
goog.exportSymbol('proto.HandshakeResponse.ErrorResult', null, global);
goog.exportSymbol('proto.HandshakeResponse.ResultCase', null, global);
goog.exportSymbol('proto.HandshakeResponse.SuccessResult', null, global);
goog.exportSymbol('proto.Request', null, global);
goog.exportSymbol('proto.Request.RequestCase', null, global);
goog.exportSymbol('proto.Response', null, global);
goog.exportSymbol('proto.Response.RequestCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HandshakeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.HandshakeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HandshakeRequest.displayName = 'proto.HandshakeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HandshakeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.HandshakeResponse.oneofGroups_);
};
goog.inherits(proto.HandshakeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HandshakeResponse.displayName = 'proto.HandshakeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HandshakeResponse.SuccessResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.HandshakeResponse.SuccessResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HandshakeResponse.SuccessResult.displayName = 'proto.HandshakeResponse.SuccessResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HandshakeResponse.ErrorResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.HandshakeResponse.ErrorResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HandshakeResponse.ErrorResult.displayName = 'proto.HandshakeResponse.ErrorResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetDevicesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetDevicesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetDevicesRequest.displayName = 'proto.GetDevicesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetDevicesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.GetDevicesResponse.oneofGroups_);
};
goog.inherits(proto.GetDevicesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetDevicesResponse.displayName = 'proto.GetDevicesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetDevicesResponse.SuccessResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetDevicesResponse.SuccessResult.repeatedFields_, null);
};
goog.inherits(proto.GetDevicesResponse.SuccessResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetDevicesResponse.SuccessResult.displayName = 'proto.GetDevicesResponse.SuccessResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetDevicesResponse.ErrorResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetDevicesResponse.ErrorResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetDevicesResponse.ErrorResult.displayName = 'proto.GetDevicesResponse.ErrorResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetDeviceInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetDeviceInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetDeviceInfoRequest.displayName = 'proto.GetDeviceInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetDeviceInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.GetDeviceInfoResponse.oneofGroups_);
};
goog.inherits(proto.GetDeviceInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetDeviceInfoResponse.displayName = 'proto.GetDeviceInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetDeviceInfoResponse.SuccessResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetDeviceInfoResponse.SuccessResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetDeviceInfoResponse.SuccessResult.displayName = 'proto.GetDeviceInfoResponse.SuccessResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetDeviceInfoResponse.ErrorResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetDeviceInfoResponse.ErrorResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetDeviceInfoResponse.ErrorResult.displayName = 'proto.GetDeviceInfoResponse.ErrorResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ExecuteCodeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ExecuteCodeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ExecuteCodeRequest.displayName = 'proto.ExecuteCodeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ExecuteCodeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ExecuteCodeResponse.oneofGroups_);
};
goog.inherits(proto.ExecuteCodeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ExecuteCodeResponse.displayName = 'proto.ExecuteCodeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ExecuteCodeResponse.SuccessResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ExecuteCodeResponse.SuccessResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ExecuteCodeResponse.SuccessResult.displayName = 'proto.ExecuteCodeResponse.SuccessResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ExecuteCodeResponse.ErrorResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ExecuteCodeResponse.ErrorResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ExecuteCodeResponse.ErrorResult.displayName = 'proto.ExecuteCodeResponse.ErrorResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ExecuteCodeResponse.FailureResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ExecuteCodeResponse.FailureResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ExecuteCodeResponse.FailureResult.displayName = 'proto.ExecuteCodeResponse.FailureResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Request.oneofGroups_);
};
goog.inherits(proto.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Request.displayName = 'proto.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Response.oneofGroups_);
};
goog.inherits(proto.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Response.displayName = 'proto.Response';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.HandshakeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.HandshakeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.HandshakeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HandshakeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HandshakeRequest}
 */
proto.HandshakeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HandshakeRequest;
  return proto.HandshakeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HandshakeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HandshakeRequest}
 */
proto.HandshakeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HandshakeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.HandshakeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HandshakeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HandshakeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.HandshakeResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.HandshakeResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  SUCCESS_RESULT: 1,
  ERROR_RESULT: 2
};

/**
 * @return {proto.HandshakeResponse.ResultCase}
 */
proto.HandshakeResponse.prototype.getResultCase = function() {
  return /** @type {proto.HandshakeResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.HandshakeResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.HandshakeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.HandshakeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.HandshakeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HandshakeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    successResult: (f = msg.getSuccessResult()) && proto.HandshakeResponse.SuccessResult.toObject(includeInstance, f),
    errorResult: (f = msg.getErrorResult()) && proto.HandshakeResponse.ErrorResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HandshakeResponse}
 */
proto.HandshakeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HandshakeResponse;
  return proto.HandshakeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HandshakeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HandshakeResponse}
 */
proto.HandshakeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.HandshakeResponse.SuccessResult;
      reader.readMessage(value,proto.HandshakeResponse.SuccessResult.deserializeBinaryFromReader);
      msg.setSuccessResult(value);
      break;
    case 2:
      var value = new proto.HandshakeResponse.ErrorResult;
      reader.readMessage(value,proto.HandshakeResponse.ErrorResult.deserializeBinaryFromReader);
      msg.setErrorResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HandshakeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.HandshakeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HandshakeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HandshakeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccessResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.HandshakeResponse.SuccessResult.serializeBinaryToWriter
    );
  }
  f = message.getErrorResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.HandshakeResponse.ErrorResult.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.HandshakeResponse.SuccessResult.prototype.toObject = function(opt_includeInstance) {
  return proto.HandshakeResponse.SuccessResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.HandshakeResponse.SuccessResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HandshakeResponse.SuccessResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    info: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HandshakeResponse.SuccessResult}
 */
proto.HandshakeResponse.SuccessResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HandshakeResponse.SuccessResult;
  return proto.HandshakeResponse.SuccessResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HandshakeResponse.SuccessResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HandshakeResponse.SuccessResult}
 */
proto.HandshakeResponse.SuccessResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HandshakeResponse.SuccessResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.HandshakeResponse.SuccessResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HandshakeResponse.SuccessResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HandshakeResponse.SuccessResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInfo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.HandshakeResponse.SuccessResult.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.HandshakeResponse.SuccessResult} returns this
 */
proto.HandshakeResponse.SuccessResult.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string info = 2;
 * @return {string}
 */
proto.HandshakeResponse.SuccessResult.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.HandshakeResponse.SuccessResult} returns this
 */
proto.HandshakeResponse.SuccessResult.prototype.setInfo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.HandshakeResponse.ErrorResult.prototype.toObject = function(opt_includeInstance) {
  return proto.HandshakeResponse.ErrorResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.HandshakeResponse.ErrorResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HandshakeResponse.ErrorResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HandshakeResponse.ErrorResult}
 */
proto.HandshakeResponse.ErrorResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HandshakeResponse.ErrorResult;
  return proto.HandshakeResponse.ErrorResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HandshakeResponse.ErrorResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HandshakeResponse.ErrorResult}
 */
proto.HandshakeResponse.ErrorResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HandshakeResponse.ErrorResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.HandshakeResponse.ErrorResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HandshakeResponse.ErrorResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HandshakeResponse.ErrorResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.HandshakeResponse.ErrorResult.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.HandshakeResponse.ErrorResult} returns this
 */
proto.HandshakeResponse.ErrorResult.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SuccessResult success_result = 1;
 * @return {?proto.HandshakeResponse.SuccessResult}
 */
proto.HandshakeResponse.prototype.getSuccessResult = function() {
  return /** @type{?proto.HandshakeResponse.SuccessResult} */ (
    jspb.Message.getWrapperField(this, proto.HandshakeResponse.SuccessResult, 1));
};


/**
 * @param {?proto.HandshakeResponse.SuccessResult|undefined} value
 * @return {!proto.HandshakeResponse} returns this
*/
proto.HandshakeResponse.prototype.setSuccessResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.HandshakeResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.HandshakeResponse} returns this
 */
proto.HandshakeResponse.prototype.clearSuccessResult = function() {
  return this.setSuccessResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.HandshakeResponse.prototype.hasSuccessResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ErrorResult error_result = 2;
 * @return {?proto.HandshakeResponse.ErrorResult}
 */
proto.HandshakeResponse.prototype.getErrorResult = function() {
  return /** @type{?proto.HandshakeResponse.ErrorResult} */ (
    jspb.Message.getWrapperField(this, proto.HandshakeResponse.ErrorResult, 2));
};


/**
 * @param {?proto.HandshakeResponse.ErrorResult|undefined} value
 * @return {!proto.HandshakeResponse} returns this
*/
proto.HandshakeResponse.prototype.setErrorResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.HandshakeResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.HandshakeResponse} returns this
 */
proto.HandshakeResponse.prototype.clearErrorResult = function() {
  return this.setErrorResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.HandshakeResponse.prototype.hasErrorResult = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetDevicesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetDevicesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetDevicesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetDevicesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetDevicesRequest}
 */
proto.GetDevicesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetDevicesRequest;
  return proto.GetDevicesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetDevicesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetDevicesRequest}
 */
proto.GetDevicesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetDevicesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetDevicesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetDevicesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetDevicesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.GetDevicesResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.GetDevicesResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  SUCCESS_RESULT: 1,
  ERROR_RESULT: 2
};

/**
 * @return {proto.GetDevicesResponse.ResultCase}
 */
proto.GetDevicesResponse.prototype.getResultCase = function() {
  return /** @type {proto.GetDevicesResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.GetDevicesResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetDevicesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetDevicesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetDevicesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetDevicesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    successResult: (f = msg.getSuccessResult()) && proto.GetDevicesResponse.SuccessResult.toObject(includeInstance, f),
    errorResult: (f = msg.getErrorResult()) && proto.GetDevicesResponse.ErrorResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetDevicesResponse}
 */
proto.GetDevicesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetDevicesResponse;
  return proto.GetDevicesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetDevicesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetDevicesResponse}
 */
proto.GetDevicesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GetDevicesResponse.SuccessResult;
      reader.readMessage(value,proto.GetDevicesResponse.SuccessResult.deserializeBinaryFromReader);
      msg.setSuccessResult(value);
      break;
    case 2:
      var value = new proto.GetDevicesResponse.ErrorResult;
      reader.readMessage(value,proto.GetDevicesResponse.ErrorResult.deserializeBinaryFromReader);
      msg.setErrorResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetDevicesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetDevicesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetDevicesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetDevicesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccessResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.GetDevicesResponse.SuccessResult.serializeBinaryToWriter
    );
  }
  f = message.getErrorResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.GetDevicesResponse.ErrorResult.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetDevicesResponse.SuccessResult.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetDevicesResponse.SuccessResult.prototype.toObject = function(opt_includeInstance) {
  return proto.GetDevicesResponse.SuccessResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetDevicesResponse.SuccessResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetDevicesResponse.SuccessResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetDevicesResponse.SuccessResult}
 */
proto.GetDevicesResponse.SuccessResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetDevicesResponse.SuccessResult;
  return proto.GetDevicesResponse.SuccessResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetDevicesResponse.SuccessResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetDevicesResponse.SuccessResult}
 */
proto.GetDevicesResponse.SuccessResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addDevices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetDevicesResponse.SuccessResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetDevicesResponse.SuccessResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetDevicesResponse.SuccessResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetDevicesResponse.SuccessResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string devices = 1;
 * @return {!Array<string>}
 */
proto.GetDevicesResponse.SuccessResult.prototype.getDevicesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.GetDevicesResponse.SuccessResult} returns this
 */
proto.GetDevicesResponse.SuccessResult.prototype.setDevicesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.GetDevicesResponse.SuccessResult} returns this
 */
proto.GetDevicesResponse.SuccessResult.prototype.addDevices = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GetDevicesResponse.SuccessResult} returns this
 */
proto.GetDevicesResponse.SuccessResult.prototype.clearDevicesList = function() {
  return this.setDevicesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetDevicesResponse.ErrorResult.prototype.toObject = function(opt_includeInstance) {
  return proto.GetDevicesResponse.ErrorResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetDevicesResponse.ErrorResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetDevicesResponse.ErrorResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetDevicesResponse.ErrorResult}
 */
proto.GetDevicesResponse.ErrorResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetDevicesResponse.ErrorResult;
  return proto.GetDevicesResponse.ErrorResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetDevicesResponse.ErrorResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetDevicesResponse.ErrorResult}
 */
proto.GetDevicesResponse.ErrorResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetDevicesResponse.ErrorResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetDevicesResponse.ErrorResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetDevicesResponse.ErrorResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetDevicesResponse.ErrorResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.GetDevicesResponse.ErrorResult.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GetDevicesResponse.ErrorResult} returns this
 */
proto.GetDevicesResponse.ErrorResult.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SuccessResult success_result = 1;
 * @return {?proto.GetDevicesResponse.SuccessResult}
 */
proto.GetDevicesResponse.prototype.getSuccessResult = function() {
  return /** @type{?proto.GetDevicesResponse.SuccessResult} */ (
    jspb.Message.getWrapperField(this, proto.GetDevicesResponse.SuccessResult, 1));
};


/**
 * @param {?proto.GetDevicesResponse.SuccessResult|undefined} value
 * @return {!proto.GetDevicesResponse} returns this
*/
proto.GetDevicesResponse.prototype.setSuccessResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.GetDevicesResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GetDevicesResponse} returns this
 */
proto.GetDevicesResponse.prototype.clearSuccessResult = function() {
  return this.setSuccessResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GetDevicesResponse.prototype.hasSuccessResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ErrorResult error_result = 2;
 * @return {?proto.GetDevicesResponse.ErrorResult}
 */
proto.GetDevicesResponse.prototype.getErrorResult = function() {
  return /** @type{?proto.GetDevicesResponse.ErrorResult} */ (
    jspb.Message.getWrapperField(this, proto.GetDevicesResponse.ErrorResult, 2));
};


/**
 * @param {?proto.GetDevicesResponse.ErrorResult|undefined} value
 * @return {!proto.GetDevicesResponse} returns this
*/
proto.GetDevicesResponse.prototype.setErrorResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.GetDevicesResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GetDevicesResponse} returns this
 */
proto.GetDevicesResponse.prototype.clearErrorResult = function() {
  return this.setErrorResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GetDevicesResponse.prototype.hasErrorResult = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetDeviceInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetDeviceInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetDeviceInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetDeviceInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    device: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetDeviceInfoRequest}
 */
proto.GetDeviceInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetDeviceInfoRequest;
  return proto.GetDeviceInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetDeviceInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetDeviceInfoRequest}
 */
proto.GetDeviceInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetDeviceInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetDeviceInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetDeviceInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetDeviceInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string device = 1;
 * @return {string}
 */
proto.GetDeviceInfoRequest.prototype.getDevice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GetDeviceInfoRequest} returns this
 */
proto.GetDeviceInfoRequest.prototype.setDevice = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.GetDeviceInfoResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.GetDeviceInfoResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  SUCCESS_RESULT: 1,
  ERROR_RESULT: 2
};

/**
 * @return {proto.GetDeviceInfoResponse.ResultCase}
 */
proto.GetDeviceInfoResponse.prototype.getResultCase = function() {
  return /** @type {proto.GetDeviceInfoResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.GetDeviceInfoResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetDeviceInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetDeviceInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetDeviceInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetDeviceInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    successResult: (f = msg.getSuccessResult()) && proto.GetDeviceInfoResponse.SuccessResult.toObject(includeInstance, f),
    errorResult: (f = msg.getErrorResult()) && proto.GetDeviceInfoResponse.ErrorResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetDeviceInfoResponse}
 */
proto.GetDeviceInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetDeviceInfoResponse;
  return proto.GetDeviceInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetDeviceInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetDeviceInfoResponse}
 */
proto.GetDeviceInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GetDeviceInfoResponse.SuccessResult;
      reader.readMessage(value,proto.GetDeviceInfoResponse.SuccessResult.deserializeBinaryFromReader);
      msg.setSuccessResult(value);
      break;
    case 2:
      var value = new proto.GetDeviceInfoResponse.ErrorResult;
      reader.readMessage(value,proto.GetDeviceInfoResponse.ErrorResult.deserializeBinaryFromReader);
      msg.setErrorResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetDeviceInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetDeviceInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetDeviceInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetDeviceInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccessResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.GetDeviceInfoResponse.SuccessResult.serializeBinaryToWriter
    );
  }
  f = message.getErrorResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.GetDeviceInfoResponse.ErrorResult.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetDeviceInfoResponse.SuccessResult.prototype.toObject = function(opt_includeInstance) {
  return proto.GetDeviceInfoResponse.SuccessResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetDeviceInfoResponse.SuccessResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetDeviceInfoResponse.SuccessResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    device: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    model: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetDeviceInfoResponse.SuccessResult}
 */
proto.GetDeviceInfoResponse.SuccessResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetDeviceInfoResponse.SuccessResult;
  return proto.GetDeviceInfoResponse.SuccessResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetDeviceInfoResponse.SuccessResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetDeviceInfoResponse.SuccessResult}
 */
proto.GetDeviceInfoResponse.SuccessResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevice(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetDeviceInfoResponse.SuccessResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetDeviceInfoResponse.SuccessResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetDeviceInfoResponse.SuccessResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetDeviceInfoResponse.SuccessResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getModel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string device = 1;
 * @return {string}
 */
proto.GetDeviceInfoResponse.SuccessResult.prototype.getDevice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GetDeviceInfoResponse.SuccessResult} returns this
 */
proto.GetDeviceInfoResponse.SuccessResult.prototype.setDevice = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.GetDeviceInfoResponse.SuccessResult.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.GetDeviceInfoResponse.SuccessResult} returns this
 */
proto.GetDeviceInfoResponse.SuccessResult.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string model = 3;
 * @return {string}
 */
proto.GetDeviceInfoResponse.SuccessResult.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.GetDeviceInfoResponse.SuccessResult} returns this
 */
proto.GetDeviceInfoResponse.SuccessResult.prototype.setModel = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetDeviceInfoResponse.ErrorResult.prototype.toObject = function(opt_includeInstance) {
  return proto.GetDeviceInfoResponse.ErrorResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetDeviceInfoResponse.ErrorResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetDeviceInfoResponse.ErrorResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetDeviceInfoResponse.ErrorResult}
 */
proto.GetDeviceInfoResponse.ErrorResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetDeviceInfoResponse.ErrorResult;
  return proto.GetDeviceInfoResponse.ErrorResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetDeviceInfoResponse.ErrorResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetDeviceInfoResponse.ErrorResult}
 */
proto.GetDeviceInfoResponse.ErrorResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetDeviceInfoResponse.ErrorResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetDeviceInfoResponse.ErrorResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetDeviceInfoResponse.ErrorResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetDeviceInfoResponse.ErrorResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.GetDeviceInfoResponse.ErrorResult.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GetDeviceInfoResponse.ErrorResult} returns this
 */
proto.GetDeviceInfoResponse.ErrorResult.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SuccessResult success_result = 1;
 * @return {?proto.GetDeviceInfoResponse.SuccessResult}
 */
proto.GetDeviceInfoResponse.prototype.getSuccessResult = function() {
  return /** @type{?proto.GetDeviceInfoResponse.SuccessResult} */ (
    jspb.Message.getWrapperField(this, proto.GetDeviceInfoResponse.SuccessResult, 1));
};


/**
 * @param {?proto.GetDeviceInfoResponse.SuccessResult|undefined} value
 * @return {!proto.GetDeviceInfoResponse} returns this
*/
proto.GetDeviceInfoResponse.prototype.setSuccessResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.GetDeviceInfoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GetDeviceInfoResponse} returns this
 */
proto.GetDeviceInfoResponse.prototype.clearSuccessResult = function() {
  return this.setSuccessResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GetDeviceInfoResponse.prototype.hasSuccessResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ErrorResult error_result = 2;
 * @return {?proto.GetDeviceInfoResponse.ErrorResult}
 */
proto.GetDeviceInfoResponse.prototype.getErrorResult = function() {
  return /** @type{?proto.GetDeviceInfoResponse.ErrorResult} */ (
    jspb.Message.getWrapperField(this, proto.GetDeviceInfoResponse.ErrorResult, 2));
};


/**
 * @param {?proto.GetDeviceInfoResponse.ErrorResult|undefined} value
 * @return {!proto.GetDeviceInfoResponse} returns this
*/
proto.GetDeviceInfoResponse.prototype.setErrorResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.GetDeviceInfoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GetDeviceInfoResponse} returns this
 */
proto.GetDeviceInfoResponse.prototype.clearErrorResult = function() {
  return this.setErrorResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GetDeviceInfoResponse.prototype.hasErrorResult = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ExecuteCodeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ExecuteCodeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ExecuteCodeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExecuteCodeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ExecuteCodeRequest}
 */
proto.ExecuteCodeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ExecuteCodeRequest;
  return proto.ExecuteCodeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ExecuteCodeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ExecuteCodeRequest}
 */
proto.ExecuteCodeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ExecuteCodeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ExecuteCodeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ExecuteCodeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExecuteCodeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.ExecuteCodeRequest.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ExecuteCodeRequest} returns this
 */
proto.ExecuteCodeRequest.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ExecuteCodeResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.ExecuteCodeResponse.ResultCase = {
  RESULT_NOT_SET: 0,
  SUCCESS_RESULT: 1,
  ERROR_RESULT: 2,
  FAILURE_RESULT: 3
};

/**
 * @return {proto.ExecuteCodeResponse.ResultCase}
 */
proto.ExecuteCodeResponse.prototype.getResultCase = function() {
  return /** @type {proto.ExecuteCodeResponse.ResultCase} */(jspb.Message.computeOneofCase(this, proto.ExecuteCodeResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ExecuteCodeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ExecuteCodeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ExecuteCodeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExecuteCodeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    successResult: (f = msg.getSuccessResult()) && proto.ExecuteCodeResponse.SuccessResult.toObject(includeInstance, f),
    errorResult: (f = msg.getErrorResult()) && proto.ExecuteCodeResponse.ErrorResult.toObject(includeInstance, f),
    failureResult: (f = msg.getFailureResult()) && proto.ExecuteCodeResponse.FailureResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ExecuteCodeResponse}
 */
proto.ExecuteCodeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ExecuteCodeResponse;
  return proto.ExecuteCodeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ExecuteCodeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ExecuteCodeResponse}
 */
proto.ExecuteCodeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ExecuteCodeResponse.SuccessResult;
      reader.readMessage(value,proto.ExecuteCodeResponse.SuccessResult.deserializeBinaryFromReader);
      msg.setSuccessResult(value);
      break;
    case 2:
      var value = new proto.ExecuteCodeResponse.ErrorResult;
      reader.readMessage(value,proto.ExecuteCodeResponse.ErrorResult.deserializeBinaryFromReader);
      msg.setErrorResult(value);
      break;
    case 3:
      var value = new proto.ExecuteCodeResponse.FailureResult;
      reader.readMessage(value,proto.ExecuteCodeResponse.FailureResult.deserializeBinaryFromReader);
      msg.setFailureResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ExecuteCodeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ExecuteCodeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ExecuteCodeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExecuteCodeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccessResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ExecuteCodeResponse.SuccessResult.serializeBinaryToWriter
    );
  }
  f = message.getErrorResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ExecuteCodeResponse.ErrorResult.serializeBinaryToWriter
    );
  }
  f = message.getFailureResult();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ExecuteCodeResponse.FailureResult.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ExecuteCodeResponse.SuccessResult.prototype.toObject = function(opt_includeInstance) {
  return proto.ExecuteCodeResponse.SuccessResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ExecuteCodeResponse.SuccessResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExecuteCodeResponse.SuccessResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    executionResult: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ExecuteCodeResponse.SuccessResult}
 */
proto.ExecuteCodeResponse.SuccessResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ExecuteCodeResponse.SuccessResult;
  return proto.ExecuteCodeResponse.SuccessResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ExecuteCodeResponse.SuccessResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ExecuteCodeResponse.SuccessResult}
 */
proto.ExecuteCodeResponse.SuccessResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExecutionResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ExecuteCodeResponse.SuccessResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ExecuteCodeResponse.SuccessResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ExecuteCodeResponse.SuccessResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExecuteCodeResponse.SuccessResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExecutionResult();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string execution_result = 1;
 * @return {string}
 */
proto.ExecuteCodeResponse.SuccessResult.prototype.getExecutionResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ExecuteCodeResponse.SuccessResult} returns this
 */
proto.ExecuteCodeResponse.SuccessResult.prototype.setExecutionResult = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ExecuteCodeResponse.ErrorResult.prototype.toObject = function(opt_includeInstance) {
  return proto.ExecuteCodeResponse.ErrorResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ExecuteCodeResponse.ErrorResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExecuteCodeResponse.ErrorResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ExecuteCodeResponse.ErrorResult}
 */
proto.ExecuteCodeResponse.ErrorResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ExecuteCodeResponse.ErrorResult;
  return proto.ExecuteCodeResponse.ErrorResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ExecuteCodeResponse.ErrorResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ExecuteCodeResponse.ErrorResult}
 */
proto.ExecuteCodeResponse.ErrorResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ExecuteCodeResponse.ErrorResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ExecuteCodeResponse.ErrorResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ExecuteCodeResponse.ErrorResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExecuteCodeResponse.ErrorResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.ExecuteCodeResponse.ErrorResult.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ExecuteCodeResponse.ErrorResult} returns this
 */
proto.ExecuteCodeResponse.ErrorResult.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ExecuteCodeResponse.FailureResult.prototype.toObject = function(opt_includeInstance) {
  return proto.ExecuteCodeResponse.FailureResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ExecuteCodeResponse.FailureResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExecuteCodeResponse.FailureResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ExecuteCodeResponse.FailureResult}
 */
proto.ExecuteCodeResponse.FailureResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ExecuteCodeResponse.FailureResult;
  return proto.ExecuteCodeResponse.FailureResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ExecuteCodeResponse.FailureResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ExecuteCodeResponse.FailureResult}
 */
proto.ExecuteCodeResponse.FailureResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ExecuteCodeResponse.FailureResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ExecuteCodeResponse.FailureResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ExecuteCodeResponse.FailureResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExecuteCodeResponse.FailureResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.ExecuteCodeResponse.FailureResult.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ExecuteCodeResponse.FailureResult} returns this
 */
proto.ExecuteCodeResponse.FailureResult.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SuccessResult success_result = 1;
 * @return {?proto.ExecuteCodeResponse.SuccessResult}
 */
proto.ExecuteCodeResponse.prototype.getSuccessResult = function() {
  return /** @type{?proto.ExecuteCodeResponse.SuccessResult} */ (
    jspb.Message.getWrapperField(this, proto.ExecuteCodeResponse.SuccessResult, 1));
};


/**
 * @param {?proto.ExecuteCodeResponse.SuccessResult|undefined} value
 * @return {!proto.ExecuteCodeResponse} returns this
*/
proto.ExecuteCodeResponse.prototype.setSuccessResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ExecuteCodeResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ExecuteCodeResponse} returns this
 */
proto.ExecuteCodeResponse.prototype.clearSuccessResult = function() {
  return this.setSuccessResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ExecuteCodeResponse.prototype.hasSuccessResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ErrorResult error_result = 2;
 * @return {?proto.ExecuteCodeResponse.ErrorResult}
 */
proto.ExecuteCodeResponse.prototype.getErrorResult = function() {
  return /** @type{?proto.ExecuteCodeResponse.ErrorResult} */ (
    jspb.Message.getWrapperField(this, proto.ExecuteCodeResponse.ErrorResult, 2));
};


/**
 * @param {?proto.ExecuteCodeResponse.ErrorResult|undefined} value
 * @return {!proto.ExecuteCodeResponse} returns this
*/
proto.ExecuteCodeResponse.prototype.setErrorResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ExecuteCodeResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ExecuteCodeResponse} returns this
 */
proto.ExecuteCodeResponse.prototype.clearErrorResult = function() {
  return this.setErrorResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ExecuteCodeResponse.prototype.hasErrorResult = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FailureResult failure_result = 3;
 * @return {?proto.ExecuteCodeResponse.FailureResult}
 */
proto.ExecuteCodeResponse.prototype.getFailureResult = function() {
  return /** @type{?proto.ExecuteCodeResponse.FailureResult} */ (
    jspb.Message.getWrapperField(this, proto.ExecuteCodeResponse.FailureResult, 3));
};


/**
 * @param {?proto.ExecuteCodeResponse.FailureResult|undefined} value
 * @return {!proto.ExecuteCodeResponse} returns this
*/
proto.ExecuteCodeResponse.prototype.setFailureResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.ExecuteCodeResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ExecuteCodeResponse} returns this
 */
proto.ExecuteCodeResponse.prototype.clearFailureResult = function() {
  return this.setFailureResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ExecuteCodeResponse.prototype.hasFailureResult = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Request.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.Request.RequestCase = {
  REQUEST_NOT_SET: 0,
  HANDSHAKE_REQUEST: 1,
  GET_DEVICES_REQUEST: 2,
  GET_DEVICE_INFO_REQUEST: 3,
  EXECUTE_CODE_REQUEST: 4
};

/**
 * @return {proto.Request.RequestCase}
 */
proto.Request.prototype.getRequestCase = function() {
  return /** @type {proto.Request.RequestCase} */(jspb.Message.computeOneofCase(this, proto.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    handshakeRequest: (f = msg.getHandshakeRequest()) && proto.HandshakeRequest.toObject(includeInstance, f),
    getDevicesRequest: (f = msg.getGetDevicesRequest()) && proto.GetDevicesRequest.toObject(includeInstance, f),
    getDeviceInfoRequest: (f = msg.getGetDeviceInfoRequest()) && proto.GetDeviceInfoRequest.toObject(includeInstance, f),
    executeCodeRequest: (f = msg.getExecuteCodeRequest()) && proto.ExecuteCodeRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Request}
 */
proto.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Request;
  return proto.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Request}
 */
proto.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.HandshakeRequest;
      reader.readMessage(value,proto.HandshakeRequest.deserializeBinaryFromReader);
      msg.setHandshakeRequest(value);
      break;
    case 2:
      var value = new proto.GetDevicesRequest;
      reader.readMessage(value,proto.GetDevicesRequest.deserializeBinaryFromReader);
      msg.setGetDevicesRequest(value);
      break;
    case 3:
      var value = new proto.GetDeviceInfoRequest;
      reader.readMessage(value,proto.GetDeviceInfoRequest.deserializeBinaryFromReader);
      msg.setGetDeviceInfoRequest(value);
      break;
    case 4:
      var value = new proto.ExecuteCodeRequest;
      reader.readMessage(value,proto.ExecuteCodeRequest.deserializeBinaryFromReader);
      msg.setExecuteCodeRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHandshakeRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.HandshakeRequest.serializeBinaryToWriter
    );
  }
  f = message.getGetDevicesRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.GetDevicesRequest.serializeBinaryToWriter
    );
  }
  f = message.getGetDeviceInfoRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.GetDeviceInfoRequest.serializeBinaryToWriter
    );
  }
  f = message.getExecuteCodeRequest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ExecuteCodeRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional HandshakeRequest handshake_request = 1;
 * @return {?proto.HandshakeRequest}
 */
proto.Request.prototype.getHandshakeRequest = function() {
  return /** @type{?proto.HandshakeRequest} */ (
    jspb.Message.getWrapperField(this, proto.HandshakeRequest, 1));
};


/**
 * @param {?proto.HandshakeRequest|undefined} value
 * @return {!proto.Request} returns this
*/
proto.Request.prototype.setHandshakeRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Request} returns this
 */
proto.Request.prototype.clearHandshakeRequest = function() {
  return this.setHandshakeRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Request.prototype.hasHandshakeRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetDevicesRequest get_devices_request = 2;
 * @return {?proto.GetDevicesRequest}
 */
proto.Request.prototype.getGetDevicesRequest = function() {
  return /** @type{?proto.GetDevicesRequest} */ (
    jspb.Message.getWrapperField(this, proto.GetDevicesRequest, 2));
};


/**
 * @param {?proto.GetDevicesRequest|undefined} value
 * @return {!proto.Request} returns this
*/
proto.Request.prototype.setGetDevicesRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Request} returns this
 */
proto.Request.prototype.clearGetDevicesRequest = function() {
  return this.setGetDevicesRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Request.prototype.hasGetDevicesRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GetDeviceInfoRequest get_device_info_request = 3;
 * @return {?proto.GetDeviceInfoRequest}
 */
proto.Request.prototype.getGetDeviceInfoRequest = function() {
  return /** @type{?proto.GetDeviceInfoRequest} */ (
    jspb.Message.getWrapperField(this, proto.GetDeviceInfoRequest, 3));
};


/**
 * @param {?proto.GetDeviceInfoRequest|undefined} value
 * @return {!proto.Request} returns this
*/
proto.Request.prototype.setGetDeviceInfoRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Request} returns this
 */
proto.Request.prototype.clearGetDeviceInfoRequest = function() {
  return this.setGetDeviceInfoRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Request.prototype.hasGetDeviceInfoRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ExecuteCodeRequest execute_code_request = 4;
 * @return {?proto.ExecuteCodeRequest}
 */
proto.Request.prototype.getExecuteCodeRequest = function() {
  return /** @type{?proto.ExecuteCodeRequest} */ (
    jspb.Message.getWrapperField(this, proto.ExecuteCodeRequest, 4));
};


/**
 * @param {?proto.ExecuteCodeRequest|undefined} value
 * @return {!proto.Request} returns this
*/
proto.Request.prototype.setExecuteCodeRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Request} returns this
 */
proto.Request.prototype.clearExecuteCodeRequest = function() {
  return this.setExecuteCodeRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Request.prototype.hasExecuteCodeRequest = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Response.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.Response.RequestCase = {
  REQUEST_NOT_SET: 0,
  HANDSHAKE_RESPONSE: 1,
  GET_DEVICES_RESPONSE: 2,
  GET_DEVICE_INFO_RESPONSE: 3,
  EXECUTE_CODE_RESPONSE: 4
};

/**
 * @return {proto.Response.RequestCase}
 */
proto.Response.prototype.getRequestCase = function() {
  return /** @type {proto.Response.RequestCase} */(jspb.Message.computeOneofCase(this, proto.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    handshakeResponse: (f = msg.getHandshakeResponse()) && proto.HandshakeResponse.toObject(includeInstance, f),
    getDevicesResponse: (f = msg.getGetDevicesResponse()) && proto.GetDevicesResponse.toObject(includeInstance, f),
    getDeviceInfoResponse: (f = msg.getGetDeviceInfoResponse()) && proto.GetDeviceInfoResponse.toObject(includeInstance, f),
    executeCodeResponse: (f = msg.getExecuteCodeResponse()) && proto.ExecuteCodeResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Response}
 */
proto.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Response;
  return proto.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Response}
 */
proto.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.HandshakeResponse;
      reader.readMessage(value,proto.HandshakeResponse.deserializeBinaryFromReader);
      msg.setHandshakeResponse(value);
      break;
    case 2:
      var value = new proto.GetDevicesResponse;
      reader.readMessage(value,proto.GetDevicesResponse.deserializeBinaryFromReader);
      msg.setGetDevicesResponse(value);
      break;
    case 3:
      var value = new proto.GetDeviceInfoResponse;
      reader.readMessage(value,proto.GetDeviceInfoResponse.deserializeBinaryFromReader);
      msg.setGetDeviceInfoResponse(value);
      break;
    case 4:
      var value = new proto.ExecuteCodeResponse;
      reader.readMessage(value,proto.ExecuteCodeResponse.deserializeBinaryFromReader);
      msg.setExecuteCodeResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHandshakeResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.HandshakeResponse.serializeBinaryToWriter
    );
  }
  f = message.getGetDevicesResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.GetDevicesResponse.serializeBinaryToWriter
    );
  }
  f = message.getGetDeviceInfoResponse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.GetDeviceInfoResponse.serializeBinaryToWriter
    );
  }
  f = message.getExecuteCodeResponse();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ExecuteCodeResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional HandshakeResponse handshake_response = 1;
 * @return {?proto.HandshakeResponse}
 */
proto.Response.prototype.getHandshakeResponse = function() {
  return /** @type{?proto.HandshakeResponse} */ (
    jspb.Message.getWrapperField(this, proto.HandshakeResponse, 1));
};


/**
 * @param {?proto.HandshakeResponse|undefined} value
 * @return {!proto.Response} returns this
*/
proto.Response.prototype.setHandshakeResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Response} returns this
 */
proto.Response.prototype.clearHandshakeResponse = function() {
  return this.setHandshakeResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Response.prototype.hasHandshakeResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetDevicesResponse get_devices_response = 2;
 * @return {?proto.GetDevicesResponse}
 */
proto.Response.prototype.getGetDevicesResponse = function() {
  return /** @type{?proto.GetDevicesResponse} */ (
    jspb.Message.getWrapperField(this, proto.GetDevicesResponse, 2));
};


/**
 * @param {?proto.GetDevicesResponse|undefined} value
 * @return {!proto.Response} returns this
*/
proto.Response.prototype.setGetDevicesResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Response} returns this
 */
proto.Response.prototype.clearGetDevicesResponse = function() {
  return this.setGetDevicesResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Response.prototype.hasGetDevicesResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GetDeviceInfoResponse get_device_info_response = 3;
 * @return {?proto.GetDeviceInfoResponse}
 */
proto.Response.prototype.getGetDeviceInfoResponse = function() {
  return /** @type{?proto.GetDeviceInfoResponse} */ (
    jspb.Message.getWrapperField(this, proto.GetDeviceInfoResponse, 3));
};


/**
 * @param {?proto.GetDeviceInfoResponse|undefined} value
 * @return {!proto.Response} returns this
*/
proto.Response.prototype.setGetDeviceInfoResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Response} returns this
 */
proto.Response.prototype.clearGetDeviceInfoResponse = function() {
  return this.setGetDeviceInfoResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Response.prototype.hasGetDeviceInfoResponse = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ExecuteCodeResponse execute_code_response = 4;
 * @return {?proto.ExecuteCodeResponse}
 */
proto.Response.prototype.getExecuteCodeResponse = function() {
  return /** @type{?proto.ExecuteCodeResponse} */ (
    jspb.Message.getWrapperField(this, proto.ExecuteCodeResponse, 4));
};


/**
 * @param {?proto.ExecuteCodeResponse|undefined} value
 * @return {!proto.Response} returns this
*/
proto.Response.prototype.setExecuteCodeResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Response} returns this
 */
proto.Response.prototype.clearExecuteCodeResponse = function() {
  return this.setExecuteCodeResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Response.prototype.hasExecuteCodeResponse = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto);
